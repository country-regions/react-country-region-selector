"use strict";(self.webpackChunkrcrs_docs=self.webpackChunkrcrs_docs||[]).push([[617],{9390:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"demos/features/ShortcodeValues","title":"Shortcode Values","description":"The valueType prop on both components alters the value of each option to be a short code rather than the full","source":"@site/docs/demos/features/ShortcodeValues.mdx","sourceDirName":"demos/features","slug":"/demos/features/ShortcodeValues","permalink":"/react-country-region-selector/demos/features/ShortcodeValues","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Shortcode Values","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Shortcode Labels","permalink":"/react-country-region-selector/demos/features/ShortcodeLabels"},"next":{"title":"Country Whitelist","permalink":"/react-country-region-selector/demos/features/CountryWhitelist"}}');var r=o(5723),s=o(6142),a=o(6997);const c={title:"Shortcode Values",sidebar_position:7},l=void 0,i={},u=[];function h(e){const t={code:"code",em:"em",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"valueType"})," prop on both components alters the ",(0,r.jsx)(t.em,{children:"value"})," of each option to be a short code rather than the full\ncountry or region name, like with the visible label. Note that when you use ",(0,r.jsx)(t.code,{children:"valueType"})," as ",(0,r.jsx)(t.code,{children:"short"})," for the\n",(0,r.jsx)(t.code,{children:"CountryDropdown"})," component you need to tell the RegionDropdown component that it's using shortcodes via the\n",(0,r.jsx)(t.code,{children:"countryValueType"})," prop."]}),"\n",(0,r.jsx)(a.A,{}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { CountryDropdown, RegionDropdown } from 'react-country-region-selector';\n\nconst ShortcodeValues = () => {\n  const [country, setCountry] = useState('');\n  const [region, setRegion] = useState('');\n\n  return (\n    <>\n      <CountryDropdown\n        value={country}\n        onChange={(val) => setCountry(val)}\n        // highlight-next-line\n        valueType=\"short\"\n      />\n      <RegionDropdown\n        country={country}\n        value={region}\n        // highlight-next-line\n        valueType=\"short\"\n        // highlight-next-line\n        countryValueType=\"short\"\n        onChange={(val) => setRegion(val)}\n      />\n    </>\n  );\n};\n\nexport default ShortcodeValues;\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},6997:(e,t,o)=>{o.d(t,{A:()=>a});var n=o(2155),r=o(7388),s=o(5723);const a=()=>{const[e,t]=(0,n.useState)(""),[o,a]=(0,n.useState)("");return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.wP,{value:e,onChange:e=>t(e),labelType:"short"}),(0,s.jsx)(r.mM,{country:e,value:o,labelType:"short",onChange:e=>a(e)})]})}}}]);