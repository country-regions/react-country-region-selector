"use strict";(self.webpackChunkrcrs_docs=self.webpackChunkrcrs_docs||[]).push([[303],{7640:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"demos/integrations/index","title":"Integrations","description":"Since 4.0.0 you can now integrate react-country-region-selector with any external component library, like Material UI,","source":"@site/docs/demos/integrations/index.mdx","sourceDirName":"demos/integrations","slug":"/demos/integrations/","permalink":"/react-country-region-selector/demos/integrations/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Integrations"},"sidebar":"tutorialSidebar","previous":{"title":"Priority Options","permalink":"/react-country-region-selector/demos/features/PriorityOptions"},"next":{"title":"Material UI","permalink":"/react-country-region-selector/demos/integrations/MaterialUI"}}');var r=t(5723),i=t(6142);const s={title:"Integrations"},a=void 0,c={},l=[];function d(e){const n={a:"a",code:"code",em:"em",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.code,{children:"4.0.0"})," you can now integrate ",(0,r.jsx)(n.code,{children:"react-country-region-selector"})," with any external component library, like Material UI,\nFluent UI etc."]}),"\n",(0,r.jsx)(n.p,{children:"Every library has its own unique behaviours and components, so we kept the API generic to keep it as flexible as possible.\nYou'll be most interested in these two props:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"customRender"}),": use this prop to handle rendering whatever JSX you want"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"customProps"}),". this lets pass any additional arbitrary data you want into your ",(0,r.jsx)(n.code,{children:"customRender"})," method that isn't already defined\non ",(0,r.jsx)(n.code,{children:"CountryDropdown"})," and ",(0,r.jsx)(n.code,{children:"RegionDropdown"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["These two props should make it flexible enough to accommodate any library/framework you're using, but if not, please raise an\n",(0,r.jsx)(n.a,{href:"https://github.com/country-regions/react-country-region-selector/issues",children:"issue on github"})," and explain why it's not possible in your case."]}),"\n",(0,r.jsx)(n.p,{children:"Take a look at the following integrations to see how they can be used."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Oh - and if you do a new integration not listed here, we'd welcome PRs!"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);