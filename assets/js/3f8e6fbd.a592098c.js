"use strict";(self.webpackChunkrcrs_docs=self.webpackChunkrcrs_docs||[]).push([[191],{6795:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"demos/features/CountryBlacklist","title":"Country Blacklist","description":"The blacklist prop omits those countries from the dropdown. This demo hides all countries starting with A.","source":"@site/docs/demos/features/CountryBlacklist.mdx","sourceDirName":"demos/features","slug":"/demos/features/CountryBlacklist","permalink":"/react-country-region-selector/demos/features/CountryBlacklist","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"title":"Country Blacklist","sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Country Whitelist","permalink":"/react-country-region-selector/demos/features/CountryWhitelist"},"next":{"title":"Region Whitelist","permalink":"/react-country-region-selector/demos/features/RegionWhitelist"}}');var o=n(5723),s=n(6142),i=n(2155),a=n(7388);const c=()=>{const[e,t]=(0,i.useState)(""),[n,r]=(0,i.useState)(""),s=(0,i.useMemo)((()=>["AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ"]),[]);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.wP,{value:e,onChange:e=>t(e),blacklist:s}),(0,o.jsx)(a.mM,{country:e,value:n,onChange:e=>r(e)})]})},l={title:"Country Blacklist",sidebar_position:9},u=void 0,d={},h=[];function p(e){const t={a:"a",code:"code",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"blacklist"})," prop omits those countries from the dropdown. This demo hides all countries starting with ",(0,o.jsx)(t.code,{children:"A"}),".\nThe values are found in the ",(0,o.jsx)(t.code,{children:"countryShortCode"})," value in the ",(0,o.jsx)(t.a,{href:"https://github.com/country-regions/country-region-data/blob/master/data.json",children:"source data package"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Note that we memoize the ",(0,o.jsx)(t.code,{children:"blacklist"})," prop to prevent unnecessary re-renders. See the notes on ",(0,o.jsx)(t.a,{href:"../../advanced/performance",children:"performance"}),"."]}),"\n",(0,o.jsx)(c,{}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:"import React, { useMemo, useState } from 'react';\nimport { CountryDropdown, RegionDropdown } from 'react-country-region-selector';\n\nconst CountryBlacklist = () => {\n  const [country, setCountry] = useState('');\n  const [region, setRegion] = useState('');\n  const blacklist = useMemo(\n    () => [\n      'AF',\n      'AX',\n      'AL',\n      'DZ',\n      'AS',\n      'AD',\n      'AO',\n      'AI',\n      'AQ',\n      'AG',\n      'AR',\n      'AM',\n      'AW',\n      'AU',\n      'AT',\n      'AZ',\n    ],\n    []\n  );\n\n  return (\n    <>\n      <CountryDropdown\n        value={country}\n        onChange={(val) => setCountry(val)}\n        // highlight-start\n        blacklist={blacklist}\n        // highlight-end\n      />\n      <RegionDropdown\n        country={country}\n        value={region}\n        onChange={(val) => setRegion(val)}\n      />\n    </>\n  );\n};\n\nexport default CountryBlacklist;\n"})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);