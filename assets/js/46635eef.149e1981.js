"use strict";(self.webpackChunkrcrs_docs=self.webpackChunkrcrs_docs||[]).push([[839],{7769:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>u,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"demos/BasicUsage","title":"Basic Usage","description":"Let\'s get started! This first demo shows the basic usage of the script, using minimal settings. As you can see, you\'re","source":"@site/docs/demos/BasicUsage.mdx","sourceDirName":"demos","slug":"/demos/BasicUsage","permalink":"/react-country-region-selector/demos/BasicUsage","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Basic Usage","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Demos","permalink":"/react-country-region-selector/demos/"},"next":{"title":"Features","permalink":"/react-country-region-selector/demos/features/"}}');var o=t(5723),r=t(6142),a=t(2155),i=t(7388);const c=()=>{const[e,n]=(0,a.useState)(""),[t,s]=(0,a.useState)("");return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.wP,{value:e,onChange:e=>{n(e),e||s("")}}),(0,o.jsx)(i.mM,{country:e,value:t,onChange:e=>s(e)})]})},u={title:"Basic Usage",sidebar_position:1},d=void 0,l={},h=[];function g(e){const n={a:"a",code:"code",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Let's get started! This first demo shows the basic usage of the script, using minimal settings. As you can see, you're\nresponsible for tracking state, but the script handles rendering the appropriate countries and regions."}),"\n",(0,o.jsxs)(n.p,{children:["The script outputs raw ",(0,o.jsx)(n.code,{children:"select"})," and ",(0,o.jsx)(n.code,{children:"option"})," HTML elements, so any styling is up to you. However, do see the\n",(0,o.jsx)(n.a,{href:"./integrations",children:"integrations"})," section if you want to use the script with Material UI, Fluent UI or other framework\ncomponents instead of basic HTML."]}),"\n",(0,o.jsxs)(n.p,{children:["Note the use of the extra ",(0,o.jsx)(n.code,{children:"onChangeCountry"})," method which resets the region value when the country value is removed by\nthe user. This may or may not be needed depending on your use-case, but it's never a bad idea to ensure your state is\ncorrect. The remaining demos won't include that callback and simply call ",(0,o.jsx)(n.code,{children:"setCountry"})," instead."]}),"\n",(0,o.jsx)(c,{}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { CountryDropdown, RegionDropdown } from 'react-country-region-selector';\n\nconst BasicUsage = () => {\n  const [country, setCountry] = useState('');\n  const [region, setRegion] = useState('');\n\n  const onChangeCountry = (val) => {\n    setCountry(val);\n    if (!val) {\n      setRegion('');\n    }\n  };\n\n  return (\n    <>\n      <CountryDropdown value={country} onChange={onChangeCountry} />\n      <RegionDropdown\n        country={country}\n        value={region}\n        onChange={(val) => setRegion(val)}\n      />\n    </>\n  );\n};\n\nexport default BasicUsage;\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}}}]);