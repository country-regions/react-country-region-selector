"use strict";(self.webpackChunkrcrs_docs=self.webpackChunkrcrs_docs||[]).push([[873],{8648:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"demos/features/ShortcodeLabels","title":"Shortcode Labels","description":"The CountryDropdown and RegionDropdown fields both let you customize the display values for the","source":"@site/docs/demos/features/ShortcodeLabels.mdx","sourceDirName":"demos/features","slug":"/demos/features/ShortcodeLabels","permalink":"/react-country-region-selector/demos/features/ShortcodeLabels","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Shortcode Labels","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Name, ID, Class attributes","permalink":"/react-country-region-selector/demos/features/NameIdClassAttrs"},"next":{"title":"Shortcode Values","permalink":"/react-country-region-selector/demos/features/ShortcodeValues"}}');var r=o(5723),s=o(6142),a=o(6997);const l={title:"Shortcode Labels",sidebar_position:6},c=void 0,d={},i=[];function u(e){const t={code:"code",em:"em",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"CountryDropdown"})," and ",(0,r.jsx)(t.code,{children:"RegionDropdown"})," fields both let you customize the display values for the\ndropdowns. Either ",(0,r.jsx)(t.code,{children:"full"})," (default) or ",(0,r.jsx)(t.code,{children:"short"}),". You can mix and match. Note that this is purely for the ",(0,r.jsx)(t.em,{children:"label"}),".\nIf you want to change the ",(0,r.jsx)(t.em,{children:"values"})," (i.e. what'll be saved + submitted to the server), see the next demo."]}),"\n",(0,r.jsx)(a.A,{}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { CountryDropdown, RegionDropdown } from 'react-country-region-selector';\n\nconst ShortcodeLabels = () => {\n  const [country, setCountry] = useState('');\n  const [region, setRegion] = useState('');\n\n  return (\n    <>\n      <CountryDropdown\n        value={country}\n        // highlight-next-line\n        labelType=\"short\"\n        onChange={(val) => setCountry(val)}\n      />\n      <RegionDropdown\n        country={country}\n        value={region}\n        // highlight-next-line\n        labelType=\"short\"\n        onChange={(val) => setRegion(val)}\n      />\n    </>\n  );\n};\n\nexport default ShortcodeLabels;\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},6997:(e,t,o)=>{o.d(t,{A:()=>a});var n=o(2155),r=o(7388),s=o(5723);const a=()=>{const[e,t]=(0,n.useState)(""),[o,a]=(0,n.useState)("");return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.wP,{value:e,onChange:e=>t(e),labelType:"short"}),(0,s.jsx)(r.mM,{country:e,value:o,labelType:"short",onChange:e=>a(e)})]})}}}]);