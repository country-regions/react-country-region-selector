"use strict";(self.webpackChunkrcrs_docs=self.webpackChunkrcrs_docs||[]).push([[116],{4508:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"demos/features/RegionBlacklist","title":"Region Blacklist","description":"The blacklist prop on the RegionDropdown copmonent lets you hide specific regions from the list. This hides","source":"@site/docs/demos/features/RegionBlacklist.mdx","sourceDirName":"demos/features","slug":"/demos/features/RegionBlacklist","permalink":"/react-country-region-selector/demos/features/RegionBlacklist","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"title":"Region Blacklist","sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Region Whitelist","permalink":"/react-country-region-selector/demos/features/RegionWhitelist"},"next":{"title":"Disable Fields","permalink":"/react-country-region-selector/demos/features/DisableFields"}}');var s=t(5723),r=t(6142),i=t(2155),a=t(7388);const c=()=>{const[e,n]=(0,i.useState)(""),[t,o]=(0,i.useState)("");return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.wP,{value:e,onChange:e=>n(e),whitelist:["CA","US"]}),(0,s.jsx)(a.mM,{country:e,value:t,onChange:e=>o(e),blacklist:{CA:["AB","BC"],US:["WA","TX"]}})]})},l={title:"Region Blacklist",sidebar_position:11},d=void 0,u={},h=[];function g(e){const n={a:"a",code:"code",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"blacklist"})," prop on the RegionDropdown copmonent lets you hide specific regions from the list. This hides\nAlberta and BC from Canada's regions and Washington and Texas from US. The\nvalues are found in the ",(0,s.jsx)(n.code,{children:"countryShortCode"})," value in the ",(0,s.jsx)(n.a,{href:"https://github.com/country-regions/country-region-data/blob/master/data.json",children:"source data package"}),"."]}),"\n",(0,s.jsx)(c,{}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { CountryDropdown, RegionDropdown } from 'react-country-region-selector';\n\nconst RegionBlacklist = () => {\n  const [country, setCountry] = useState('');\n  const [region, setRegion] = useState('');\n\n  return (\n    <>\n      <CountryDropdown\n        value={country}\n        onChange={(val) => setCountry(val)}\n        whitelist={['CA', 'US']}\n      />\n      <RegionDropdown\n        country={country}\n        value={region}\n        onChange={(val) => setRegion(val)}\n        // highlight-start\n        blacklist={{\n          CA: ['AB', 'BC'],\n          US: ['WA', 'TX'],\n        }}\n        // highlight-end\n      />\n    </>\n  );\n};\n\nexport default RegionBlacklist;\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}}}]);