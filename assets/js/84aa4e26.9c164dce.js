"use strict";(self.webpackChunkrcrs_docs=self.webpackChunkrcrs_docs||[]).push([[432],{3458:(t,o,e)=>{e.r(o),e.d(o,{assets:()=>d,contentTitle:()=>u,default:()=>h,frontMatter:()=>p,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"demos/features/PriorityOptions","title":"Priority Options","description":"The priorityOptions property on CountryDropdown lets you list options at the top of the country dropdown.","source":"@site/docs/demos/features/PriorityOptions.mdx","sourceDirName":"demos/features","slug":"/demos/features/PriorityOptions","permalink":"/react-country-region-selector/demos/features/PriorityOptions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"title":"Priority Options","sidebar_position":14},"sidebar":"tutorialSidebar","previous":{"title":"Custom Options","permalink":"/react-country-region-selector/demos/features/CustomOptions"},"next":{"title":"Integrations","permalink":"/react-country-region-selector/demos/integrations/"}}');var r=e(5723),s=e(6142),i=e(2155),a=e(7388);const c=()=>{const[t,o]=(0,i.useState)(""),[e,n]=(0,i.useState)("");return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.wP,{value:t,onChange:t=>o(t),priorityOptions:["CA","US","GB"]}),(0,r.jsx)(a.mM,{country:t,value:e,onChange:t=>n(t)})]})},p={title:"Priority Options",sidebar_position:14},u=void 0,d={},l=[];function y(t){const o={code:"code",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"priorityOptions"})," property on ",(0,r.jsx)(o.code,{children:"CountryDropdown"})," lets you list options at the top of the country dropdown.\nThis demo places Canada, US + the UK at the top of the list."]}),"\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(o.hr,{}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { CountryDropdown, RegionDropdown } from 'react-country-region-selector';\n\nconst PriorityOptions = () => {\n  const [country, setCountry] = useState('');\n  const [region, setRegion] = useState('');\n\n  return (\n    <>\n      <CountryDropdown\n        value={country}\n        onChange={(val) => setCountry(val)}\n        priorityOptions={['CA', 'US', 'GB']}\n      />\n      <RegionDropdown\n        country={country}\n        value={region}\n        onChange={(val) => setRegion(val)}\n      />\n    </>\n  );\n};\n\nexport default PriorityOptions;\n"})})]})}function h(t={}){const{wrapper:o}={...(0,s.R)(),...t.components};return o?(0,r.jsx)(o,{...t,children:(0,r.jsx)(y,{...t})}):y(t)}}}]);