"use strict";(self.webpackChunkrcrs_docs=self.webpackChunkrcrs_docs||[]).push([[651],{6917:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>u,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"demos/features/CountryWhitelist","title":"Country Whitelist","description":"The whitelist prop on the CountryDropdown component limits the listed countries to those that you specify. The","source":"@site/docs/demos/features/CountryWhitelist.mdx","sourceDirName":"demos/features","slug":"/demos/features/CountryWhitelist","permalink":"/react-country-region-selector/demos/features/CountryWhitelist","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"title":"Country Whitelist","sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Shortcode Values","permalink":"/react-country-region-selector/demos/features/ShortcodeValues"},"next":{"title":"Country Blacklist","permalink":"/react-country-region-selector/demos/features/CountryBlacklist"}}');var r=n(5723),s=n(6142),i=n(2155),a=n(7388);const c=()=>{const[e,t]=(0,i.useState)(""),[n,o]=(0,i.useState)(""),s=(0,i.useMemo)((()=>["GB","US","CA"]),[]);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.wP,{value:e,onChange:e=>t(e),whitelist:s}),(0,r.jsx)(a.mM,{country:e,value:n,onChange:e=>o(e)})]})},l={title:"Country Whitelist",sidebar_position:8},u=void 0,h={},d=[];function p(e){const t={a:"a",code:"code",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"whitelist"})," prop on the CountryDropdown component limits the listed countries to those that you specify. The\nvalues are found in the ",(0,r.jsx)(t.code,{children:"countryShortCode"})," value in the ",(0,r.jsx)(t.a,{href:"https://github.com/country-regions/country-region-data/blob/master/data.json",children:"source data package"}),".\nNote the order will always be alphabetical."]}),"\n",(0,r.jsxs)(t.p,{children:["Note that we memoize the ",(0,r.jsx)(t.code,{children:"whitelist"})," prop to prevent unnecessary re-renders. See the notes on ",(0,r.jsx)(t.a,{href:"../../advanced/performance",children:"performance"}),"."]}),"\n",(0,r.jsx)(c,{}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import React, { useMemo, useState } from 'react';\nimport { CountryDropdown, RegionDropdown } from 'react-country-region-selector';\n\nconst CountryWhitelist = () => {\n  const [country, setCountry] = useState('');\n  const [region, setRegion] = useState('');\n  const whitelist = useMemo(() => ['GB', 'US', 'CA'], []);\n\n  return (\n    <>\n      <CountryDropdown\n        value={country}\n        onChange={(val) => setCountry(val)}\n        // highlight-next-line\n        whitelist={whitelist}\n      />\n      <RegionDropdown\n        country={country}\n        value={region}\n        onChange={(val) => setRegion(val)}\n      />\n    </>\n  );\n};\n\nexport default CountryWhitelist;\n"})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);