"use strict";(self.webpackChunkrcrs_docs=self.webpackChunkrcrs_docs||[]).push([[841],{3365:(t,o,e)=>{e.r(o),e.d(o,{assets:()=>d,contentTitle:()=>p,default:()=>g,frontMatter:()=>c,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"demos/features/CustomOptions","title":"Custom Options","description":"The customOptions property of the RegionDropdown lets you append additional options to the bottom.","source":"@site/docs/demos/features/CustomOptions.mdx","sourceDirName":"demos/features","slug":"/demos/features/CustomOptions","permalink":"/react-country-region-selector/demos/features/CustomOptions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"title":"Custom Options","sidebar_position":14},"sidebar":"tutorialSidebar","previous":{"title":"Arbitrary Attributes","permalink":"/react-country-region-selector/demos/features/ArbitraryAttributes"},"next":{"title":"Priority Options","permalink":"/react-country-region-selector/demos/features/PriorityOptions"}}');var r=e(5723),s=e(6142),i=e(2155),a=e(7388);const u=()=>{const[t,o]=(0,i.useState)(""),[e,n]=(0,i.useState)("");return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.wP,{value:t,onChange:t=>o(t)}),(0,r.jsx)(a.mM,{country:t,value:e,onChange:t=>n(t),customOptions:["Custom option 1","Custom option 2","Custom option 3"]})]})},c={title:"Custom Options",sidebar_position:14},p=void 0,d={},l=[];function m(t){const o={code:"code",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"customOptions"})," property of the ",(0,r.jsx)(o.code,{children:"RegionDropdown"})," lets you append additional options to the bottom."]}),"\n",(0,r.jsx)(u,{}),"\n",(0,r.jsx)(o.hr,{}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport { CountryDropdown, RegionDropdown } from 'react-country-region-selector';\n\nconst ArbitraryProps = () => {\n  const [country, setCountry] = useState('');\n  const [region, setRegion] = useState('');\n\n  return (\n    <>\n      <CountryDropdown\n        value={country}\n        onChange={(val) => setCountry(val)}\n        style={{\n          backgroundColor: 'blue',\n          color: 'white',\n          padding: 10,\n          fontSize: 20,\n        }}\n      />\n      <RegionDropdown\n        country={country}\n        value={region}\n        onChange={(val) => setRegion(val)}\n        style={{\n          backgroundColor: 'green',\n          color: 'white',\n          padding: 10,\n          fontSize: 20,\n        }}\n      />\n    </>\n  );\n};\n\nexport default ArbitraryProps;\n"})})]})}function g(t={}){const{wrapper:o}={...(0,s.R)(),...t.components};return o?(0,r.jsx)(o,{...t,children:(0,r.jsx)(m,{...t})}):m(t)}}}]);